{
    "num_tasks": 38,
    "num_tasks_solved": 22,
    "results": [
        {
            "elapsed_time": 0.9131773329572752,
            "num_unique_values": 184,
            "num_values_explored": 1190,
            "solution": "Left(Left(Concatenate(var_0, '.0'), Find('0', Concatenate(var_0, '.0'))), Add(Find('.', Concatenate(var_0, '.0')), 2))",
            "solution_weight": 17,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['1.23', '45', '67.0', '9876']},\n    outputs=['1.23', '45.0', '67.0', '9876.0'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.00731520797126,
            "num_unique_values": 220,
            "num_values_explored": 1272,
            "solution": "Right(Concatenate('+', var_0), Len(Substitute(Concatenate('+', var_0), '-', '', 1)))",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['+12', '-34', '+567', '-8'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 64.95335967600113,
            "num_unique_values": 3608,
            "num_values_explored": 50021,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['9:00', '11:00', '3:00', '9:00'], 'var_1': ['morning', 'morning', 'afternoon', 'night']},\n    outputs=['9 AM', '11 AM', '3 PM', '9 PM'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4904076600214466,
            "num_unique_values": 355,
            "num_values_explored": 1774,
            "solution": "Concatenate(Proper(Left(var_0, Find(',', Concatenate(' ', var_0)))), Upper(Right(var_0, 2)))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['mountain view, ca', 'HOUSTON, TX']},\n    outputs=['Mountain View, CA', 'Houston, TX'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.572457624017261,
            "num_unique_values": 377,
            "num_values_explored": 1741,
            "solution": "Concatenate(Proper(Left(var_0, 2)), Mid(Lower(var_0), 3, 99))",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this is a sentence.', 'FIX CAPITALIZATION.']},\n    outputs=['This is a sentence.', 'Fix capitalization.'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 59.567314910003915,
            "num_unique_values": 2927,
            "num_values_explored": 50029,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['same', 'the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['same', 'find this', 'SEARCH', 'search', 't to s']},\n    outputs=['TRUE', 'FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.077753114048392,
            "num_unique_values": 915,
            "num_values_explored": 7387,
            "solution": "If(Exact(var_0, If(Exact(var_1, Lower(var_1)), 'the text to search in', 'TRUE')), 'FALSE', 'TRUE')",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'THE TEXT TO SEARCH IN'], 'var_1': ['find this', 's.arch', 'SeArCh', 't to s']},\n    outputs=['FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.940461139020044,
            "num_unique_values": 2064,
            "num_values_explored": 50088,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['to', ' ', 't', ' t']},\n    outputs=['1', '4', '4', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.980687227041926,
            "num_unique_values": 879,
            "num_values_explored": 6358,
            "solution": "Lower(Concatenate(Left(var_0, 1), Concatenate(Upper(var_1), Concatenate('@', Concatenate(Lower(var_2), '.com')))))",
            "solution_weight": 14,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry', 'Bill'], 'var_1': ['Page', 'Gates'], 'var_2': ['Google', 'Microsoft']},\n    outputs=['lpage@google.com', 'bgates@microsoft.com'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 55.661660432990175,
            "num_unique_values": 2895,
            "num_values_explored": 50012,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['08092019', '12032020']},\n    outputs=['09/08/2019', '03/12/2020'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 53.394720321986824,
            "num_unique_values": 1739,
            "num_values_explored": 50082,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['2019/11/23', '2020/03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.87913016200764,
            "num_unique_values": 1365,
            "num_values_explored": 50062,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['11/23', '03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.64859369199257,
            "num_unique_values": 3061,
            "num_values_explored": 50053,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['www.google.com', 'www.stanford.edu', 'a.b.c.org'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.99566287494963,
            "num_unique_values": 1475,
            "num_values_explored": 50018,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['/', '/news/', '/d/e/f.g'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23402409499976784,
            "num_unique_values": 102,
            "num_values_explored": 309,
            "solution": "Trim(Left(var_1, Find(' ', Concatenate(var_0, var_1))))",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', ''], 'var_1': ['Sergey Brin', 'Bill Gates']},\n    outputs=['Sergey', 'Bill'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.97125495300861,
            "num_unique_values": 1468,
            "num_values_explored": 16080,
            "solution": "If(Exact(var_0, Lower(var_0)), 'true', 'false')",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this text is lowercase', 'Not Lowercase', '123', 'XYZ']},\n    outputs=['true', 'false', 'true', 'false'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22707123099826276,
            "num_unique_values": 105,
            "num_values_explored": 277,
            "solution": "Trim(Mid(var_0, Find(' ', Concatenate(var_0, var_0)), 99))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', 'George Washington'], 'var_1': ['Sergey Brin', '']},\n    outputs=['Page', 'Washington'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 63.49567684199428,
            "num_unique_values": 2933,
            "num_values_explored": 50055,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['43%', '0%', '52%', '100%', '47%', '100%', '58%', '0%']},\n    outputs=['In Progress', 'Not Yet Started', 'In Progress', 'Completed', 'In Progress', 'Completed', 'In Progress', 'Not Yet Started'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.26996157300891,
            "num_unique_values": 1010,
            "num_values_explored": 50072,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['12', '(34)', '567', '(8)'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 52.09285882097902,
            "num_unique_values": 1916,
            "num_values_explored": 50077,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'text', 'multiple words'], 'var_1': ['10', '5', '17']},\n    outputs=['    string', ' text', '   multiple words'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8681901600211859,
            "num_unique_values": 238,
            "num_values_explored": 1047,
            "solution": "Right(Mid(Substitute(Concatenate('00', var_0), '0', Concatenate('000', '0'), 1), 2, 99), Add(2, 3))",
            "solution_weight": 16,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['123', '45', '6780', '9', '54321']},\n    outputs=['00123', '00045', '06780', '00009', '54321'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.91728482104372,
            "num_unique_values": 1404,
            "num_values_explored": 50015,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['/this/is/a/path', '/home', '/a/b']},\n    outputs=['4', '1', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.10657719901064411,
            "num_unique_values": 54,
            "num_values_explored": 135,
            "solution": "Mid(var_0, Find(var_0, Concatenate(var_1, var_0)), Len(Left(var_0, Find(var_1, Concatenate(var_0, var_1), Add(2, 3)))))",
            "solution_weight": 18,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['prefix', 'nonsense', 'atypical'], 'var_1': ['pre', 'non', 'a']},\n    outputs=['fix', 'sense', 'typical'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5389704210101627,
            "num_unique_values": 200,
            "num_values_explored": 726,
            "solution": "Concatenate(Trim('Mr. '), Mid(var_0, Find(' ', var_0, 3), 99))",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing']},\n    outputs=['Mr. Washington', 'Mr. Turing'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 58.982460241997615,
            "num_unique_values": 3044,
            "num_values_explored": 50049,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing', 'Grace Hopper', 'Ruth Porat'], 'var_1': ['male', 'male', 'female', 'female']},\n    outputs=['Mr. Washington', 'Mr. Turing', 'Ms. Hopper', 'Ms. Porat'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15706134599167854,
            "num_unique_values": 117,
            "num_values_explored": 169,
            "solution": "Lower(Trim(Concatenate(var_0, '   ')))",
            "solution_weight": 5,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['  TEXT ', 'Two words    ', '   before and after  ']},\n    outputs=['text', 'two words', 'before and after'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.85159677400952,
            "num_unique_values": 3129,
            "num_values_explored": 50093,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['Employees at <COMPANY> love its culture.', \"<COMPANY> employees are excited for <COMPANY>'s future.\"], 'var_1': ['Google', 'Microsoft']},\n    outputs=['Employees at Google love its culture.', \"Microsoft employees are excited for Microsoft's future.\"],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 58.731743987009395,
            "num_unique_values": 3271,
            "num_values_explored": 50043,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/company-strategy.html', 'https://www.google.com/some/path']},\n    outputs=['https://www.google.org/company-strategy.html', 'https://www.google.org/some/path'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.407198950997554,
            "num_unique_values": 1590,
            "num_values_explored": 16554,
            "solution": "If(Gt(Len(var_0), Len('NONE')), var_0, Substitute(Trim(Left(var_0, Len('NONE'))), 'NONE', var_1))",
            "solution_weight": 15,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['primary', 'ABC', 'NOT NONE', 'NONE', 'NONE'], 'var_1': ['secondary', 'XYZ', '123', 'select this instead', '<BACKUP>']},\n    outputs=['primary', 'ABC', 'NOT NONE', 'select this instead', '<BACKUP>'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.26310452900361,
            "num_unique_values": 2073,
            "num_values_explored": 41315,
            "solution": "If(Gte(2, Len(var_1)), var_0, Right(Left(Concatenate(var_1, var_0), Len(Concatenate(var_0, var_0))), Len(var_1)))",
            "solution_weight": 17,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['length,', '123', 'xyz', 'aa', 'aa'], 'var_1': ['is same', '45', 'abcdef', 'aaa', 'a']},\n    outputs=['length,', '123', 'abcdef', 'aaa', 'aa'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.425113336998038,
            "num_unique_values": 1161,
            "num_values_explored": 13041,
            "solution": "If(Exact(var_0, Lower(var_1)), Left(If(Exact(var_1, Lower(var_1)), 'yes', 'no'), Find(Right(var_1, 2), var_1)), 'no')",
            "solution_weight": 19,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'string', 'match this', 'match this'], 'var_1': ['string', 'STRING', 'match this', 'match that']},\n    outputs=['yes', 'no', 'yes', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.938995834963862,
            "num_unique_values": 869,
            "num_values_explored": 7848,
            "solution": "If(Exact(var_1, Lower(var_0)), 'yes', If(Exact(var_0, Lower(var_0)), 'no', 'yes'))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['text', 'StRiNg', 'match this', 'match those', 'substring'], 'var_1': ['text', 'sTrInG', 'match this', 'match that', 'substring.']},\n    outputs=['yes', 'yes', 'yes', 'no', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.894882824039087,
            "num_unique_values": 524,
            "num_values_explored": 6370,
            "solution": "Right(To_Text(Len(Substitute(var_0, Substitute(Left(var_0, Add(3, 3)), var_0, ''), Concatenate(var_0, var_0)))), 1)",
            "solution_weight": 17,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['alphabet', 'google']},\n    outputs=['8', '6'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8778591030277312,
            "num_unique_values": 221,
            "num_values_explored": 927,
            "solution": "Left(var_0, Minus(Find(Concatenate(var_1, 'cl'), Concatenate(var_0, 'cl')), 1))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['suffix', 'declaration', 'analyticly'], 'var_1': ['fix', 'tion', 'ly']},\n    outputs=['suf', 'declara', 'analytic'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1985632600262761,
            "num_unique_values": 359,
            "num_values_explored": 1296,
            "solution": "If(Exact(var_0, Upper(var_0)), Lower(var_0), Upper(var_0))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['lowercase', 'UPPERCASE', 'swap', 'CASE']},\n    outputs=['LOWERCASE', 'uppercase', 'SWAP', 'case'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 62.092972275975626,
            "num_unique_values": 2899,
            "num_values_explored": 50098,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['short text', 'max length text', 'extremely lengthy text', 'this text should be truncated']},\n    outputs=['short text', 'max length text', 'extremely lengt...', 'this text shoul...'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5674120929907076,
            "num_unique_values": 203,
            "num_values_explored": 609,
            "solution": "Concatenate(Left(Concatenate(var_0, ' '), 1), Mid(var_0, Find(' ', Concatenate(' ', var_0), 3), 1))",
            "solution_weight": 15,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Product Area', 'Vice President']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9859033920220099,
            "num_unique_values": 292,
            "num_values_explored": 1216,
            "solution": "Upper(Concatenate(Left(var_0, 1), Mid(var_0, Find(' ', Concatenate(' ', var_0), 3), 1)))",
            "solution_weight": 14,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['product area', 'Vice president']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.5789473684210527
}