{
    "num_tasks": 38,
    "num_tasks_solved": 28,
    "results": [
        {
            "elapsed_time": 7.8045481169829145,
            "num_unique_values": 854,
            "num_values_explored": 9683,
            "solution": "Substitute(Concatenate(var_0, '.0'), If(Exact(var_0, Substitute(var_0, '.', '')), Substitute(var_0, '0', '.0'), Concatenate(var_0, '.0')), var_0, 1)",
            "solution_weight": 20,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['1.23', '45', '67.0', '9876']},\n    outputs=['1.23', '45.0', '67.0', '9876.0'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.33115643897326663,
            "num_unique_values": 61,
            "num_values_explored": 357,
            "solution": "Replace('+', Find('-', Concatenate(var_0, '-')), 1, var_0)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['+12', '-34', '+567', '-8'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.4757718280307,
            "num_unique_values": 2466,
            "num_values_explored": 26932,
            "solution": "Concatenate(Left(var_0, Minus(Len(var_0), 3)), If(Exact('morning', var_1), ' AM', ' PM'))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['9:00', '11:00', '3:00', '9:00'], 'var_1': ['morning', 'morning', 'afternoon', 'night']},\n    outputs=['9 AM', '11 AM', '3 PM', '9 PM'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9663258059881628,
            "num_unique_values": 580,
            "num_values_explored": 3730,
            "solution": "Replace(Proper(var_0), Len(var_0), 1, Right(Upper(var_0), 1))",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['mountain view, ca', 'HOUSTON, TX']},\n    outputs=['Mountain View, CA', 'Houston, TX'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.531705561967101,
            "num_unique_values": 419,
            "num_values_explored": 2069,
            "solution": "Replace(Lower(var_0), 1, 2, Left(Proper(var_0), 2))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this is a sentence.', 'FIX CAPITALIZATION.']},\n    outputs=['This is a sentence.', 'Fix capitalization.'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 51.32975845399778,
            "num_unique_values": 3971,
            "num_values_explored": 50072,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['same', 'the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['same', 'find this', 'SEARCH', 'search', 't to s']},\n    outputs=['TRUE', 'FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.92271764803445,
            "num_unique_values": 3303,
            "num_values_explored": 50011,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'THE TEXT TO SEARCH IN'], 'var_1': ['find this', 's.arch', 'SeArCh', 't to s']},\n    outputs=['FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 53.67612932797056,
            "num_unique_values": 2965,
            "num_values_explored": 50075,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['to', ' ', 't', ' t']},\n    outputs=['1', '4', '4', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.64419269602513,
            "num_unique_values": 1372,
            "num_values_explored": 14762,
            "solution": "Concatenate(Left(Lower(var_0), 1), Concatenate(Lower(Concatenate(var_1, Concatenate('@', var_2))), '.com'))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry', 'Bill'], 'var_1': ['Page', 'Gates'], 'var_2': ['Google', 'Microsoft']},\n    outputs=['lpage@google.com', 'bgates@microsoft.com'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4649691410013475,
            "num_unique_values": 294,
            "num_values_explored": 2167,
            "solution": "Concatenate(Mid(var_0, 3, 2), Concatenate('/', Replace(var_0, 3, 2, '/')))",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['08092019', '12032020']},\n    outputs=['09/08/2019', '03/12/2020'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.38440473296213895,
            "num_unique_values": 96,
            "num_values_explored": 588,
            "solution": "Substitute(var_0, '-', '/')",
            "solution_weight": 4,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['2019/11/23', '2020/03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5660022150259465,
            "num_unique_values": 284,
            "num_values_explored": 2155,
            "solution": "Concatenate(Left(Right(var_0, Add(2, 3)), 2), Concatenate('/', Right(var_0, 2)))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['11/23', '03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.288207133999094,
            "num_unique_values": 4070,
            "num_values_explored": 50097,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['www.google.com', 'www.stanford.edu', 'a.b.c.org'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8062474229955114,
            "num_unique_values": 548,
            "num_values_explored": 3475,
            "solution": "Mid(var_0, Find('/', var_0, Find('.', var_0)), 99)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['/', '/news/', '/d/e/f.g'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24167105898959562,
            "num_unique_values": 103,
            "num_values_explored": 362,
            "solution": "Trim(Left(var_1, Find(' ', Concatenate(var_1, ' '))))",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', ''], 'var_1': ['Sergey Brin', 'Bill Gates']},\n    outputs=['Sergey', 'Bill'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1763868890120648,
            "num_unique_values": 351,
            "num_values_explored": 1336,
            "solution": "If(Exact(var_0, Lower(var_0)), 'true', 'false')",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this text is lowercase', 'Not Lowercase', '123', 'XYZ']},\n    outputs=['true', 'false', 'true', 'false'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1998809720389545,
            "num_unique_values": 89,
            "num_values_explored": 246,
            "solution": "Right(var_0, Minus(Len(var_0), Find(' ', var_0)))",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', 'George Washington'], 'var_1': ['Sergey Brin', '']},\n    outputs=['Page', 'Washington'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 50.37376005295664,
            "num_unique_values": 4122,
            "num_values_explored": 50064,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['43%', '0%', '52%', '100%', '47%', '100%', '58%', '0%']},\n    outputs=['In Progress', 'Not Yet Started', 'In Progress', 'Completed', 'In Progress', 'Completed', 'In Progress', 'Not Yet Started'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2303751269937493,
            "num_unique_values": 427,
            "num_values_explored": 4151,
            "solution": "Left(Concatenate(Substitute(var_0, '-', '('), ')'), Len(Substitute(var_0, '-', var_0)))",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['12', '(34)', '567', '(8)'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.84049686399521,
            "num_unique_values": 3147,
            "num_values_explored": 50068,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'text', 'multiple words'], 'var_1': ['10', '5', '17']},\n    outputs=['    string', ' text', '   multiple words'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.053791969025042,
            "num_unique_values": 224,
            "num_values_explored": 1236,
            "solution": "Right(Concatenate('00', Concatenate('000', var_0)), Add(3, 2))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['123', '45', '6780', '9', '54321']},\n    outputs=['00123', '00045', '06780', '00009', '54321'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.41137169895228,
            "num_unique_values": 2989,
            "num_values_explored": 50051,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['/this/is/a/path', '/home', '/a/b']},\n    outputs=['4', '1', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11444055498577654,
            "num_unique_values": 48,
            "num_values_explored": 162,
            "solution": "Mid(var_0, Find(var_0, Concatenate(var_1, var_0)), 99)",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['prefix', 'nonsense', 'atypical'], 'var_1': ['pre', 'non', 'a']},\n    outputs=['fix', 'sense', 'typical'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6395114280167036,
            "num_unique_values": 383,
            "num_values_explored": 2135,
            "solution": "Mid(Substitute(var_0, ' ', 'Mr. ', 1), Find(' ', var_0), 99)",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing']},\n    outputs=['Mr. Washington', 'Mr. Turing'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.96515804599039,
            "num_unique_values": 4367,
            "num_values_explored": 50040,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing', 'Grace Hopper', 'Ruth Porat'], 'var_1': ['male', 'male', 'female', 'female']},\n    outputs=['Mr. Washington', 'Mr. Turing', 'Ms. Hopper', 'Ms. Porat'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2147234320291318,
            "num_unique_values": 113,
            "num_values_explored": 270,
            "solution": "Lower(Trim(Concatenate(var_0, '  ')))",
            "solution_weight": 5,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['  TEXT ', 'Two words    ', '   before and after  ']},\n    outputs=['text', 'two words', 'before and after'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.11633099603932,
            "num_unique_values": 4101,
            "num_values_explored": 50002,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['Employees at <COMPANY> love its culture.', \"<COMPANY> employees are excited for <COMPANY>'s future.\"], 'var_1': ['Google', 'Microsoft']},\n    outputs=['Employees at Google love its culture.', \"Microsoft employees are excited for Microsoft's future.\"],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.039006463019177,
            "num_unique_values": 1085,
            "num_values_explored": 11421,
            "solution": "Mid(Substitute(Concatenate(Left('https://www.google.com/', 2), var_0), 'https://www.google.com/', 'https://www.google.org/'), 3, Len(var_0))",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/company-strategy.html', 'https://www.google.com/some/path']},\n    outputs=['https://www.google.org/company-strategy.html', 'https://www.google.org/some/path'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.14919149596244,
            "num_unique_values": 3153,
            "num_values_explored": 41219,
            "solution": "If(Gte(Len(var_0), Minus(Len(var_1), 2)), var_0, var_1)",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['primary', 'ABC', 'NOT NONE', 'NONE', 'NONE'], 'var_1': ['secondary', 'XYZ', '123', 'select this instead', '<BACKUP>']},\n    outputs=['primary', 'ABC', 'NOT NONE', 'select this instead', '<BACKUP>'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.646088129025884,
            "num_unique_values": 1090,
            "num_values_explored": 8003,
            "solution": "If(Gte(Len(var_0), Len(var_1)), var_0, var_1)",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['length,', '123', 'xyz', 'aa', 'aa'], 'var_1': ['is same', '45', 'abcdef', 'aaa', 'a']},\n    outputs=['length,', '123', 'abcdef', 'aaa', 'aa'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.782331814989448,
            "num_unique_values": 1733,
            "num_values_explored": 17943,
            "solution": "Right(If(Exact(var_1, var_0), Proper(Concatenate('string', 'yes')), 'no'), 3)",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'string', 'match this', 'match this'], 'var_1': ['string', 'STRING', 'match this', 'match that']},\n    outputs=['yes', 'no', 'yes', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.326055224984884,
            "num_unique_values": 942,
            "num_values_explored": 6842,
            "solution": "If(Exact(Proper(var_1), Proper(var_0)), 'yes', 'no')",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['text', 'StRiNg', 'match this', 'match those', 'substring'], 'var_1': ['text', 'sTrInG', 'match this', 'match that', 'substring.']},\n    outputs=['yes', 'yes', 'yes', 'no', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6002076389850117,
            "num_unique_values": 441,
            "num_values_explored": 2837,
            "solution": "To_Text(Len(var_0))",
            "solution_weight": 3,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['alphabet', 'google']},\n    outputs=['8', '6'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6869438749854453,
            "num_unique_values": 229,
            "num_values_explored": 817,
            "solution": "Left(var_0, Minus(Len(var_0), Len(var_1)))",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['suffix', 'declaration', 'analyticly'], 'var_1': ['fix', 'tion', 'ly']},\n    outputs=['suf', 'declara', 'analytic'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6568418060196564,
            "num_unique_values": 223,
            "num_values_explored": 863,
            "solution": "Left(Substitute(Lower(var_0), Left(var_0, 2), Upper(var_0)), Len(var_0))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['lowercase', 'UPPERCASE', 'swap', 'CASE']},\n    outputs=['LOWERCASE', 'uppercase', 'SWAP', 'case'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.618886205018498,
            "num_unique_values": 1177,
            "num_values_explored": 8015,
            "solution": "Left(Concatenate(Left(var_0, Len(Rept(' text', 3))), Rept('.', 3)), Len(var_0))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['short text', 'max length text', 'extremely lengthy text', 'this text should be truncated']},\n    outputs=['short text', 'max length text', 'extremely lengt...', 'this text shoul...'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 51.03205118398182,
            "num_unique_values": 2718,
            "num_values_explored": 50007,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['Product Area', 'Vice President']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.259243727021385,
            "num_unique_values": 698,
            "num_values_explored": 4863,
            "solution": "Mid(Upper(Lower(Substitute(var_0, ' ', Left(Upper(var_0), 1)))), Find(' ', var_0), 2)",
            "solution_weight": 14,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['product area', 'Vice president']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.7368421052631579
}