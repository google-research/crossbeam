{
    "num_tasks": 38,
    "num_tasks_solved": 29,
    "results": [
        {
            "elapsed_time": 7.665879783977289,
            "num_unique_values": 873,
            "num_values_explored": 9665,
            "solution": "Substitute(var_0, Substitute(var_0, '.', ''), Concatenate(var_0, '.0'))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['1.23', '45', '67.0', '9876']},\n    outputs=['1.23', '45.0', '67.0', '9876.0'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2994926130049862,
            "num_unique_values": 61,
            "num_values_explored": 347,
            "solution": "Replace('+', Find('-', Concatenate(var_0, '-')), 1, var_0)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['+12', '-34', '+567', '-8'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.508807612990495,
            "num_unique_values": 2985,
            "num_values_explored": 34283,
            "solution": "Concatenate(Replace(var_0, Find(':00', var_0), 3, ' '), Trim(Concatenate(' ', If(Exact('morning', var_1), ' AM', Trim(' PM')))))",
            "solution_weight": 18,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['9:00', '11:00', '3:00', '9:00'], 'var_1': ['morning', 'morning', 'afternoon', 'night']},\n    outputs=['9 AM', '11 AM', '3 PM', '9 PM'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3749669120297767,
            "num_unique_values": 370,
            "num_values_explored": 1802,
            "solution": "Concatenate(Proper(Trim(Substitute(var_0, Right(var_0, 2), ''))), Right(Upper(var_0), 3))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['mountain view, ca', 'HOUSTON, TX']},\n    outputs=['Mountain View, CA', 'Houston, TX'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6913278470165096,
            "num_unique_values": 413,
            "num_values_explored": 2183,
            "solution": "Replace(Lower(var_0), 1, 2, Left(Proper(var_0), 2))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this is a sentence.', 'FIX CAPITALIZATION.']},\n    outputs=['This is a sentence.', 'Fix capitalization.'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 50.56458531197859,
            "num_unique_values": 3688,
            "num_values_explored": 50048,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['same', 'the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['same', 'find this', 'SEARCH', 'search', 't to s']},\n    outputs=['TRUE', 'FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.76204706198769,
            "num_unique_values": 3454,
            "num_values_explored": 50045,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'THE TEXT TO SEARCH IN'], 'var_1': ['find this', 's.arch', 'SeArCh', 't to s']},\n    outputs=['FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 55.414657495042775,
            "num_unique_values": 3144,
            "num_values_explored": 50059,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['to', ' ', 't', ' t']},\n    outputs=['1', '4', '4', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.889761696977075,
            "num_unique_values": 1159,
            "num_values_explored": 11362,
            "solution": "Concatenate(Left(Lower(var_0), 1), Lower(Concatenate(var_1, Concatenate('@', Concatenate(Lower(var_2), '.com')))))",
            "solution_weight": 14,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry', 'Bill'], 'var_1': ['Page', 'Gates'], 'var_2': ['Google', 'Microsoft']},\n    outputs=['lpage@google.com', 'bgates@microsoft.com'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.59599330101628,
            "num_unique_values": 2904,
            "num_values_explored": 50063,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['08092019', '12032020']},\n    outputs=['09/08/2019', '03/12/2020'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.41977208002936095,
            "num_unique_values": 91,
            "num_values_explored": 608,
            "solution": "Substitute(var_0, '-', '/')",
            "solution_weight": 4,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['2019/11/23', '2020/03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.149513759999536,
            "num_unique_values": 1050,
            "num_values_explored": 14084,
            "solution": "Concatenate(Left(Right(var_0, Add(2, 3)), 2), Concatenate('/', Right(var_0, 2)))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['11/23', '03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 55.49183896899922,
            "num_unique_values": 4154,
            "num_values_explored": 50028,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['www.google.com', 'www.stanford.edu', 'a.b.c.org'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.547258079983294,
            "num_unique_values": 2908,
            "num_values_explored": 39648,
            "solution": "Right(Right(Substitute(Substitute(var_0, 'http://', '/'), var_0, '/'), Minus(Find('.', var_0), 1)), Find(Right(var_0, 1), var_0))",
            "solution_weight": 19,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['/', '/news/', '/d/e/f.g'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2462643129983917,
            "num_unique_values": 103,
            "num_values_explored": 366,
            "solution": "Trim(Left(var_1, Find(' ', Concatenate(var_1, ' '))))",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', ''], 'var_1': ['Sergey Brin', 'Bill Gates']},\n    outputs=['Sergey', 'Bill'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.668268846988212,
            "num_unique_values": 799,
            "num_values_explored": 5341,
            "solution": "If(Exact(var_0, Lower(var_0)), 'true', 'false')",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this text is lowercase', 'Not Lowercase', '123', 'XYZ']},\n    outputs=['true', 'false', 'true', 'false'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21466375194722787,
            "num_unique_values": 83,
            "num_values_explored": 232,
            "solution": "Replace(var_0, 1, Find(' ', var_0), '')",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', 'George Washington'], 'var_1': ['Sergey Brin', '']},\n    outputs=['Page', 'Washington'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.54986608400941,
            "num_unique_values": 2704,
            "num_values_explored": 26912,
            "solution": "If(Exact('100%', var_0), 'Completed', If(Exact('0%', var_0), 'Not Yet Started', 'In Progress'))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['43%', '0%', '52%', '100%', '47%', '100%', '58%', '0%']},\n    outputs=['In Progress', 'Not Yet Started', 'In Progress', 'Completed', 'In Progress', 'Completed', 'In Progress', 'Not Yet Started'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8617975419620052,
            "num_unique_values": 301,
            "num_values_explored": 2533,
            "solution": "Left(Concatenate(Substitute(var_0, '-', '('), ')'), Len(Substitute(var_0, '-', var_0)))",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['12', '(34)', '567', '(8)'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.865604318038095,
            "num_unique_values": 2864,
            "num_values_explored": 50054,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'text', 'multiple words'], 'var_1': ['10', '5', '17']},\n    outputs=['    string', ' text', '   multiple words'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3188296669977717,
            "num_unique_values": 77,
            "num_values_explored": 363,
            "solution": "Right(Replace('00', 2, 1, Concatenate('000', var_0)), Add(2, 3))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['123', '45', '6780', '9', '54321']},\n    outputs=['00123', '00045', '06780', '00009', '54321'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.882733765989542,
            "num_unique_values": 1148,
            "num_values_explored": 8243,
            "solution": "Left(Concatenate(Mid(To_Text(Minus(Len(var_0), Add(3, 3))), 2, 1), To_Text(Add(1, 3))), Len(To_Text(Len(var_0))))",
            "solution_weight": 20,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['/this/is/a/path', '/home', '/a/b']},\n    outputs=['4', '1', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.10905635298695415,
            "num_unique_values": 53,
            "num_values_explored": 152,
            "solution": "Mid(var_0, Find(var_0, Concatenate(var_1, var_0)), 99)",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['prefix', 'nonsense', 'atypical'], 'var_1': ['pre', 'non', 'a']},\n    outputs=['fix', 'sense', 'typical'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6636648820131086,
            "num_unique_values": 377,
            "num_values_explored": 2221,
            "solution": "Mid(Substitute(var_0, ' ', 'Mr. ', 1), Find(' ', var_0), 99)",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing']},\n    outputs=['Mr. Washington', 'Mr. Turing'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.620425623958,
            "num_unique_values": 4211,
            "num_values_explored": 50001,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing', 'Grace Hopper', 'Ruth Porat'], 'var_1': ['male', 'male', 'female', 'female']},\n    outputs=['Mr. Washington', 'Mr. Turing', 'Ms. Hopper', 'Ms. Porat'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2166759890387766,
            "num_unique_values": 116,
            "num_values_explored": 291,
            "solution": "Lower(Trim(var_0))",
            "solution_weight": 3,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['  TEXT ', 'Two words    ', '   before and after  ']},\n    outputs=['text', 'two words', 'before and after'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.386331099958625,
            "num_unique_values": 4188,
            "num_values_explored": 50023,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['Employees at <COMPANY> love its culture.', \"<COMPANY> employees are excited for <COMPANY>'s future.\"], 'var_1': ['Google', 'Microsoft']},\n    outputs=['Employees at Google love its culture.', \"Microsoft employees are excited for Microsoft's future.\"],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.874685604998376,
            "num_unique_values": 995,
            "num_values_explored": 10077,
            "solution": "Right(Mid(Substitute(Substitute(var_0, ':', '/'), Right('https://www.google.com/', 2), 'https://www.google.org/'), 2, 99), Len(var_0))",
            "solution_weight": 15,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/company-strategy.html', 'https://www.google.com/some/path']},\n    outputs=['https://www.google.org/company-strategy.html', 'https://www.google.org/some/path'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 11.344026083999779,
            "num_unique_values": 1634,
            "num_values_explored": 13368,
            "solution": "Right(Concatenate(var_1, If(Exact('NONE', var_0), '', var_0)), Len(If(Exact('NONE', var_0), Lower(var_1), var_0)))",
            "solution_weight": 17,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['primary', 'ABC', 'NOT NONE', 'NONE', 'NONE'], 'var_1': ['secondary', 'XYZ', '123', 'select this instead', '<BACKUP>']},\n    outputs=['primary', 'ABC', 'NOT NONE', 'select this instead', '<BACKUP>'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0087280109873973,
            "num_unique_values": 508,
            "num_values_explored": 2509,
            "solution": "If(Gt(Len(var_1), Len(var_0)), var_1, var_0)",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['length,', '123', 'xyz', 'aa', 'aa'], 'var_1': ['is same', '45', 'abcdef', 'aaa', 'a']},\n    outputs=['length,', '123', 'abcdef', 'aaa', 'aa'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.8506664609885775,
            "num_unique_values": 753,
            "num_values_explored": 5481,
            "solution": "Substitute('yes', If(Exact(var_1, var_0), var_0, 'yes'), 'no')",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'string', 'match this', 'match this'], 'var_1': ['string', 'STRING', 'match this', 'match that']},\n    outputs=['yes', 'no', 'yes', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.343791099032387,
            "num_unique_values": 533,
            "num_values_explored": 2408,
            "solution": "If(Exact(Upper(var_0), Upper(var_1)), 'yes', 'no')",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['text', 'StRiNg', 'match this', 'match those', 'substring'], 'var_1': ['text', 'sTrInG', 'match this', 'match that', 'substring.']},\n    outputs=['yes', 'yes', 'yes', 'no', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.650941779022105,
            "num_unique_values": 435,
            "num_values_explored": 2789,
            "solution": "To_Text(Len(var_0))",
            "solution_weight": 3,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['alphabet', 'google']},\n    outputs=['8', '6'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6582305849879049,
            "num_unique_values": 223,
            "num_values_explored": 792,
            "solution": "Left(var_0, Minus(Len(var_0), Len(var_1)))",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['suffix', 'declaration', 'analyticly'], 'var_1': ['fix', 'tion', 'ly']},\n    outputs=['suf', 'declara', 'analytic'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.303664865961764,
            "num_unique_values": 140,
            "num_values_explored": 419,
            "solution": "Substitute(Lower(var_0), var_0, Upper(var_0))",
            "solution_weight": 6,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['lowercase', 'UPPERCASE', 'swap', 'CASE']},\n    outputs=['LOWERCASE', 'uppercase', 'SWAP', 'case'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.4180616310332,
            "num_unique_values": 4627,
            "num_values_explored": 50045,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['short text', 'max length text', 'extremely lengthy text', 'this text should be truncated']},\n    outputs=['short text', 'max length text', 'extremely lengt...', 'this text shoul...'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5508615520084277,
            "num_unique_values": 211,
            "num_values_explored": 651,
            "solution": "Concatenate(Left(var_0, 1), Trim(Mid(var_0, Find(' ', var_0), 2)))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Product Area', 'Vice President']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.725872256967705,
            "num_unique_values": 1686,
            "num_values_explored": 22220,
            "solution": "Mid(Substitute(Substitute(Proper(Lower(Concatenate(var_0, 'pr'))), ' ', 'pr'), 'pr', Left(Upper(var_0), 1)), Find(' ', var_0), 2)",
            "solution_weight": 19,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['product area', 'Vice president']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.7631578947368421
}