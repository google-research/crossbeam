{
    "num_tasks": 38,
    "num_tasks_solved": 30,
    "results": [
        {
            "elapsed_time": 8.038637963996734,
            "num_unique_values": 901,
            "num_values_explored": 10318,
            "solution": "Left(Concatenate(Substitute(var_0, '.0', ''), '.0'), Add(2, Find('.', Concatenate(var_0, '.'))))",
            "solution_weight": 14,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['1.23', '45', '67.0', '9876']},\n    outputs=['1.23', '45.0', '67.0', '9876.0'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3083766259951517,
            "num_unique_values": 62,
            "num_values_explored": 351,
            "solution": "Replace('+', Find('-', Concatenate(var_0, '-')), 1, var_0)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['+12', '-34', '+567', '-8'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.50113881402649,
            "num_unique_values": 3109,
            "num_values_explored": 36807,
            "solution": "Trim(Concatenate(Left(Concatenate(Substitute(var_0, ':00', ' '), ' PM'), 2), If(Exact('morning', var_1), ' AM', Trim(' PM'))))",
            "solution_weight": 17,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['9:00', '11:00', '3:00', '9:00'], 'var_1': ['morning', 'morning', 'afternoon', 'night']},\n    outputs=['9 AM', '11 AM', '3 PM', '9 PM'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3039041939773597,
            "num_unique_values": 367,
            "num_values_explored": 1746,
            "solution": "Concatenate(Proper(Left(var_0, Find(', ', var_0))), Right(Upper(var_0), 3))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['mountain view, ca', 'HOUSTON, TX']},\n    outputs=['Mountain View, CA', 'Houston, TX'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1959041189984418,
            "num_unique_values": 363,
            "num_values_explored": 1719,
            "solution": "Concatenate(Left(Proper(var_0), 1), Lower(Mid(var_0, 2, 99)))",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this is a sentence.', 'FIX CAPITALIZATION.']},\n    outputs=['This is a sentence.', 'Fix capitalization.'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.85736972105224,
            "num_unique_values": 3781,
            "num_values_explored": 50095,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['same', 'the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['same', 'find this', 'SEARCH', 'search', 't to s']},\n    outputs=['TRUE', 'FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 46.45273911696859,
            "num_unique_values": 2901,
            "num_values_explored": 50088,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'THE TEXT TO SEARCH IN'], 'var_1': ['find this', 's.arch', 'SeArCh', 't to s']},\n    outputs=['FALSE', 'FALSE', 'TRUE', 'TRUE'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.459162035025656,
            "num_unique_values": 3463,
            "num_values_explored": 50057,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['the text to search in', 'the text to search in', 'the text to search in', 'the text to search in'], 'var_1': ['to', ' ', 't', ' t']},\n    outputs=['1', '4', '4', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.614950103976298,
            "num_unique_values": 1423,
            "num_values_explored": 14892,
            "solution": "Concatenate(Left(Lower(var_0), 1), Lower(Concatenate(var_1, Concatenate('@', Lower(Concatenate(var_2, '.com'))))))",
            "solution_weight": 14,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry', 'Bill'], 'var_1': ['Page', 'Gates'], 'var_2': ['Google', 'Microsoft']},\n    outputs=['lpage@google.com', 'bgates@microsoft.com'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.210330998001155,
            "num_unique_values": 1452,
            "num_values_explored": 18054,
            "solution": "Concatenate(Mid(var_0, 3, 2), Concatenate('/', Replace(var_0, 2, 3, Concatenate(Mid(var_0, 2, 1), '/'))))",
            "solution_weight": 17,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['08092019', '12032020']},\n    outputs=['09/08/2019', '03/12/2020'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3932273489772342,
            "num_unique_values": 105,
            "num_values_explored": 577,
            "solution": "Substitute(var_0, '-', '/')",
            "solution_weight": 4,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['2019/11/23', '2020/03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8195515389670618,
            "num_unique_values": 194,
            "num_values_explored": 1115,
            "solution": "Mid(Substitute(var_0, '-', '/'), Add(3, 3), 99)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['2019-11-23', '2020-03-07']},\n    outputs=['11/23', '03/07'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.46340115799103,
            "num_unique_values": 4218,
            "num_values_explored": 50032,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['www.google.com', 'www.stanford.edu', 'a.b.c.org'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.425107376009692,
            "num_unique_values": 1545,
            "num_values_explored": 14239,
            "solution": "Replace(var_0, 1, Find('/', var_0, Find('.', var_0)), '/')",
            "solution_weight": 10,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/', 'http://www.stanford.edu/news/', 'http://a.b.c.org/d/e/f.g']},\n    outputs=['/', '/news/', '/d/e/f.g'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25837797502754256,
            "num_unique_values": 103,
            "num_values_explored": 364,
            "solution": "Trim(Left(var_1, Find(' ', Concatenate(var_0, var_1))))",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', ''], 'var_1': ['Sergey Brin', 'Bill Gates']},\n    outputs=['Sergey', 'Bill'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.485408428008668,
            "num_unique_values": 654,
            "num_values_explored": 4070,
            "solution": "If(Exact(var_0, Lower(var_0)), 'true', 'false')",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['this text is lowercase', 'Not Lowercase', '123', 'XYZ']},\n    outputs=['true', 'false', 'true', 'false'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19508380600018427,
            "num_unique_values": 80,
            "num_values_explored": 230,
            "solution": "Replace(var_0, 1, Find(' ', var_0), '')",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Larry Page', 'George Washington'], 'var_1': ['Sergey Brin', '']},\n    outputs=['Page', 'Washington'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.75306118495064,
            "num_unique_values": 2807,
            "num_values_explored": 28467,
            "solution": "If(Exact(var_0, '100%'), 'Completed', If(Exact('0%', var_0), 'Not Yet Started', 'In Progress'))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['43%', '0%', '52%', '100%', '47%', '100%', '58%', '0%']},\n    outputs=['In Progress', 'Not Yet Started', 'In Progress', 'Completed', 'In Progress', 'Completed', 'In Progress', 'Not Yet Started'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.842122876958456,
            "num_unique_values": 303,
            "num_values_explored": 2488,
            "solution": "Left(Concatenate(Substitute(var_0, '-', '('), ')'), Len(Substitute(var_0, '-', var_0)))",
            "solution_weight": 12,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['12', '-34', '567', '-8']},\n    outputs=['12', '(34)', '567', '(8)'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.11044940497959,
            "num_unique_values": 2837,
            "num_values_explored": 50058,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'text', 'multiple words'], 'var_1': ['10', '5', '17']},\n    outputs=['    string', ' text', '   multiple words'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9431747589842416,
            "num_unique_values": 196,
            "num_values_explored": 1192,
            "solution": "Mid(Concatenate('000', Concatenate('0', var_0)), Len(var_0), 99)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['123', '45', '6780', '9', '54321']},\n    outputs=['00123', '00045', '06780', '00009', '54321'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 52.77678903302876,
            "num_unique_values": 2870,
            "num_values_explored": 50010,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['/this/is/a/path', '/home', '/a/b']},\n    outputs=['4', '1', '2'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1685633499873802,
            "num_unique_values": 69,
            "num_values_explored": 188,
            "solution": "Replace(var_0, 1, Len(var_1), '')",
            "solution_weight": 6,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['prefix', 'nonsense', 'atypical'], 'var_1': ['pre', 'non', 'a']},\n    outputs=['fix', 'sense', 'typical'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.034706751990598,
            "num_unique_values": 1663,
            "num_values_explored": 15619,
            "solution": "Mid(Substitute(Substitute(var_0, ' ', Trim('Mr. '), 1), '.', Concatenate('.', ' ')), Find(' ', var_0), 99)",
            "solution_weight": 16,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing']},\n    outputs=['Mr. Washington', 'Mr. Turing'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.90645139402477,
            "num_unique_values": 4325,
            "num_values_explored": 50030,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['George Washington', 'Alan Turing', 'Grace Hopper', 'Ruth Porat'], 'var_1': ['male', 'male', 'female', 'female']},\n    outputs=['Mr. Washington', 'Mr. Turing', 'Ms. Hopper', 'Ms. Porat'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20263445697491989,
            "num_unique_values": 113,
            "num_values_explored": 266,
            "solution": "Lower(Trim(Replace(var_0, Find('  ', var_0), 2, '')))",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['  TEXT ', 'Two words    ', '   before and after  ']},\n    outputs=['text', 'two words', 'before and after'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 46.782474115956575,
            "num_unique_values": 4116,
            "num_values_explored": 50079,
            "solution": null,
            "solution_weight": null,
            "success": false,
            "task": "Task(\n    inputs_dict={'var_0': ['Employees at <COMPANY> love its culture.', \"<COMPANY> employees are excited for <COMPANY>'s future.\"], 'var_1': ['Google', 'Microsoft']},\n    outputs=['Employees at Google love its culture.', \"Microsoft employees are excited for Microsoft's future.\"],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.259856363001745,
            "num_unique_values": 2008,
            "num_values_explored": 26775,
            "solution": "Left(Substitute(Concatenate(Concatenate(var_0, ':'), '.'), 'https://www.google.com/', 'https://www.google.org/'), Len(var_0))",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['https://www.google.com/company-strategy.html', 'https://www.google.com/some/path']},\n    outputs=['https://www.google.org/company-strategy.html', 'https://www.google.org/some/path'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.222921822976787,
            "num_unique_values": 1554,
            "num_values_explored": 12186,
            "solution": "Substitute(var_0, Left('NONE', Minus(Len(var_1), 3)), var_1)",
            "solution_weight": 9,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['primary', 'ABC', 'NOT NONE', 'NONE', 'NONE'], 'var_1': ['secondary', 'XYZ', '123', 'select this instead', '<BACKUP>']},\n    outputs=['primary', 'ABC', 'NOT NONE', 'select this instead', '<BACKUP>'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.104432205029298,
            "num_unique_values": 2079,
            "num_values_explored": 18813,
            "solution": "If(Gte(Len(var_0), Len(var_1)), var_0, var_1)",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['length,', '123', 'xyz', 'aa', 'aa'], 'var_1': ['is same', '45', 'abcdef', 'aaa', 'a']},\n    outputs=['length,', '123', 'abcdef', 'aaa', 'aa'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.797007043031044,
            "num_unique_values": 1250,
            "num_values_explored": 9453,
            "solution": "If(Exact(var_1, var_0), 'yes', 'no')",
            "solution_weight": 6,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['string', 'string', 'match this', 'match this'], 'var_1': ['string', 'STRING', 'match this', 'match that']},\n    outputs=['yes', 'no', 'yes', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.457658397965133,
            "num_unique_values": 1706,
            "num_values_explored": 14449,
            "solution": "If(Exact(Proper(var_0), Proper(var_1)), 'yes', 'no')",
            "solution_weight": 8,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['text', 'StRiNg', 'match this', 'match those', 'substring'], 'var_1': ['text', 'sTrInG', 'match this', 'match that', 'substring.']},\n    outputs=['yes', 'yes', 'yes', 'no', 'no'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.261993147956673,
            "num_unique_values": 538,
            "num_values_explored": 4548,
            "solution": "To_Text(Len(var_0))",
            "solution_weight": 3,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['alphabet', 'google']},\n    outputs=['8', '6'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6768049559905194,
            "num_unique_values": 225,
            "num_values_explored": 825,
            "solution": "Left(var_0, Minus(Len(var_0), Len(var_1)))",
            "solution_weight": 7,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['suffix', 'declaration', 'analyticly'], 'var_1': ['fix', 'tion', 'ly']},\n    outputs=['suf', 'declara', 'analytic'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2814562920248136,
            "num_unique_values": 142,
            "num_values_explored": 426,
            "solution": "Substitute(Lower(var_0), var_0, Upper(var_0))",
            "solution_weight": 6,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['lowercase', 'UPPERCASE', 'swap', 'CASE']},\n    outputs=['LOWERCASE', 'uppercase', 'SWAP', 'case'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.520902231975924,
            "num_unique_values": 2207,
            "num_values_explored": 17905,
            "solution": "Left(Concatenate(Left(var_0, Len(Rept(' text', 3))), Rept('.', 3)), Len(var_0))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['short text', 'max length text', 'extremely lengthy text', 'this text should be truncated']},\n    outputs=['short text', 'max length text', 'extremely lengt...', 'this text shoul...'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.681589666986838,
            "num_unique_values": 401,
            "num_values_explored": 2051,
            "solution": "Mid(Substitute(var_0, ' ', Left(var_0, 1)), Find(' ', var_0), 2)",
            "solution_weight": 11,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['Product Area', 'Vice President']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.534276053018402,
            "num_unique_values": 2017,
            "num_values_explored": 29842,
            "solution": "Concatenate(Left(Upper(var_0), 1), Trim(Mid(Proper(var_0), Find(' ', var_0), 2)))",
            "solution_weight": 13,
            "success": true,
            "task": "Task(\n    inputs_dict={'var_0': ['product area', 'Vice president']},\n    outputs=['PA', 'VP'],\n    solution=None\n)",
            "task_solution": null,
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.7894736842105263
}